openapi: 3.0.0
info:
  title: API
  version: 1.0.0
  description: API
servers:
  - url: http://127.0.0.1:8000
paths:
  /v1/member/login:
    post:
      tags:
        - Member
      summary: Member login
      description: Normal Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: admin
                password:
                  type: string
                  example: admin
              required:
                - username
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJndWVzdF9pZCI6MSwibWVtYmVyX2lkIjoxLCJleHAiOjE3MDY3OTMzMTJ9.YoSa8QjqZ8jUUhMWHzsNTsrgMt5YmxQuey0vBwTKV6s"
                  refresh_token:
                    type: string
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJndWVzdF9pZCI6MSwibWVtYmVyX2lkIjoxLCJleHAiOjE3MDczOTA5MTJ9.8l9dcqj63c1RJfE8Bkb2X_eqs4TCn7qcAxI3PvjeqP4"
        '400':
          description: Login failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "아이디 및 비밀번호 정보가 일치하지 않습니다."
              examples:
                bad-username-or-password:
                  value:
                    message: "아이디 및 비밀번호 정보가 일치하지 않습니다."
                mandatory-missing:
                  value:
                    message: "입력값을 다시 확인해주세요."

  /v1/member/social-login:
    post:
      tags:
        - Member
      summary: Member social login
      description: Social Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - provider
                - token
              properties:
                provider:
                  type: integer
                  enum: [2, 3, 4]  # 2: KAKAO, 3: NAVER, 4: GOOGLE
                  example: 2
                token:
                  type: string
                  example: "gyYwO9GsLD30O1T7Sg"
      responses:
        '200':
          description: Social login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJndWVzdF9pZCI6MSwibWVtYmVyX2lkIjoxLCJleHAiOjE3MDY3OTMzMTJ9.YoSa8QjqZ8jUUhMWHzsNTsrgMt5YmxQuey0vBwTKV6s"
                  refresh_token:
                    type: string
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJndWVzdF9pZCI6MSwibWVtYmVyX2lkIjoxLCJleHAiOjE3MDczOTA5MTJ9.8l9dcqj63c1RJfE8Bkb2X_eqs4TCn7qcAxI3PvjeqP4"
                  is_created:
                    type: boolean
                    example: true
        '400':
          description: Login failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "아이디 및 비밀번호 정보가 일치하지 않습니다."
              examples:
                bad-token:
                  value:
                    message: "소셜 로그인에 발급된 토큰에 문제가 있습니다."
                mandatory-missing:
                  value:
                    message: "입력값을 다시 확인해주세요."

  /v1/member/refresh-token:
    post:
      tags:
        - Member
      summary: Refresh access token
      description: Refreshes the access token using a refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh_token
              properties:
                refresh_token:
                  type: string
                  example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJndWVzdF9pZCI6MSwibWVtYmVyX2lkIjoxLCJleHAiOjE3MDczOTI1NTZ9.PVuMlaXns3mUW9QYWuD1qa0Et66i1A0RgLby78hs90c"
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJndWVzdF9pZCI6MSwibWVtYmVyX2lkIjoxLCJleHAiOjE3MDY3OTQ5NTZ9.u9aHwyOhd_7arlbDGgmo-2j9LqKU3WK7VH5P0A6Q5C8"
                  refresh_token:
                    type: string
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJndWVzdF9pZCI6MSwibWVtYmVyX2lkIjoxLCJleHAiOjE3MDczOTI1NTZ9.PVuMlaXns3mUW9QYWuD1qa0Et66i1A0RgLby78hs90c"
        '400':
          description: Bad request - Invalid or missing refresh token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                invalid-token:
                  value:
                    message: "잘못된 리프레시 토큰입니다."
                missing-value:
                  value:
                    message: "입력값을 다시 확인해주세요."

  /v1/member/guest-token:
    post:
      tags:
        - Member
      summary: Generate guest token
      description: Generates a new access token and refresh token for a guest user
      responses:
        '200':
          description: Tokens generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJndWVzdF9pZCI6NCwibWVtYmVyX2lkIjpudWxsLCJleHAiOjE3MDY3OTU0MDJ9.OrdHI8qt6bVx343K6yg5wqmHSfGZ_c_t4GKFPdJ3Khg"
                  refresh_token:
                    type: string
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJndWVzdF9pZCI6NCwibWVtYmVyX2lkIjpudWxsLCJleHAiOjE3MDczOTMwMDJ9.TJw6jktUuwWmgsc1MBmAtNKe15ASsLzJ4pgPNGtQX3g"

  /v1/member/sign-up-validation:
    post:
      tags:
        - Member
      summary: Validate user registration information
      description: Validates the given user registration information for uniqueness and conformity.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - nickname
                - password1
                - password2
              properties:
                username:
                  type: string
                  example: "test"
                email:
                  type: string
                  format: email
                  example: "test@naver.com"
                nickname:
                  type: string
                  example: "test"
                password1:
                  type: string
                  example: "testtest"
                password2:
                  type: string
                  example: "testtest"
      responses:
        '200':
          description: Validation successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "success"
        '400':
          description: Validation failed - Errors in the provided information
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: string
              examples:
                multiple_errors:
                  value:
                    username: ["이미 사용중인 아이디입니다."]  # UsernameSignUpErrors
                    email: ["이미 가입한 이메일입니다."]  # EmailSignUpErrors
                    nickname: ["이미 사용중인 닉네임입니다."]  # NicknameSignUpErrors
                    password2: ["비밀번호와 비밀번호 확인이 동일하지 않습니다."]  # PasswordSignUpErrors
                missing-value:
                  value:
                    message: "입력값을 다시 확인해주세요."

  /v1/member/sign-up-check:
    post:
      tags:
        - Member
      summary: Send verification code to email
      description: Validates user input and sends a verification code to the user's email if the input is valid.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - username
                - nickname
                - password2
              properties:
                email:
                  type: string
                  format: email
                  example: "test@naver.com"
                username:
                  type: string
                  example: "username"
                nickname:
                  type: string
                  example: "nickname"
                password2:
                  type: string
                  example: "password2"
      responses:
        '200':
          description: Verification code sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "인증번호를 이메일로 전송했습니다."
        '400':
          description: Error sending verification code or invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                send_failure:
                  value:
                    message: "인증번호를 이메일로 전송하지 못했습니다."
                input_error:
                  value:
                    message: "입력값을 다시 확인해주세요."

  /v1/member/sign-up-validate-token:
    post:
      tags:
        - Member
      summary: Validate one-time token for email verification
      description: Validates the one-time token sent to the user's email as part of the registration process.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - one_time_token
              properties:
                email:
                  type: string
                  format: email
                  example: "test@naver.com"
                one_time_token:
                  type: string
                  example: "one_time_token"
      responses:
        '200':
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "회원가입에 성공했습니다."
        '400':
          description: Validation error or registration failure
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                input_error:
                  value:
                    message: "입력값을 다시 확인해주세요."
                request_new_token:
                  value:
                    message: "이메일 인증번호를 다시 요청하세요."
                incorrect_token:
                  value:
                    message: "인증번호가 다릅니다."
                username_exists:
                  value:
                    message: "이미 사용중인 아이디입니다."
                nickname_exists:
                  value:
                    message: "이미 사용중인 닉네임입니다."
                email_registered:
                  value:
                    message: "이미 가입한 이메일입니다."
                token_attempts_exceeded:
                  value:
                    message: "{}회 이상 인증번호를 틀리셨습니다. 현 이메일은 {}시간 동안 인증할 수 없습니다."

  /v1/product/point:
    get:
      tags:
        - Product
      summary: List points products with pagination
      description: Retrieve a paginated list of points products.
      parameters:
        - in: query
          name: page
          required: true
          schema:
            type: integer
            default: 1
          description: Page number of the product listing.
        - in: query
          name: size
          required: true
          schema:
            type: integer
            default: 20
          description: Number of products per page.
      responses:
        '200':
          description: A list of points products
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        product_id:
                          type: integer
                          example: 1
                        product_type:
                          type: string
                          example: "POINT"
                        title:
                          type: string
                          example: "G-point 1000"
                        description:
                          type: string
                          example: "G-point 1000"
                        price:
                          type: integer
                          example: 1000
                        point:
                          type: integer
                          example: 1000
                        is_sold_out:
                          type: boolean
                          example: false
                        bought_count:
                          type: integer
                          example: 0
                        review_count:
                          type: integer
                          example: 0
                        review_rate:
                          type: number
                          format: float
                          example: 0.0

  /v1/payment/product/buy/kakao:
    post:
      tags:
        - Kakao Payment
      summary: Purchase a product using Kakao Pay
      description: Initiates a product purchase transaction using Kakao Pay.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - product_id
                - product_type
                - quantity
                - payment_type
                - order_phone_number
              properties:
                product_id:
                  type: integer
                  example: 1
                product_type:
                  type: string
                  enum: [POINT]
                  example: "POINT"
                quantity:
                  type: integer
                  example: 10
                payment_type:
                  type: string
                  enum: [KAKAO]
                  example: "KAKAO"
                order_phone_number:
                  type: string
                  example: "01074686889"
      responses:
        '200':
          description: Purchase initiated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  tid:
                    type: string
                    example: "T5bef4ed1c025b0f886f"
                  next_redirect_app_url:
                    type: string
                    example: "https://online-pay.kakao.com/mockup/v1/1061874fa483485aeaf2f25cc35faf7651fafc55fb5aedccbc5a3b38f2639146/aInfo"
                  next_redirect_mobile_url:
                    type: string
                    example: "https://online-pay.kakao.com/mockup/v1/1061874fa483485aeaf2f25cc35faf7651fafc55fb5aedccbc5a3b38f2639146/mInfo"
                  next_redirect_pc_url:
                    type: string
                    example: "https://online-pay.kakao.com/mockup/v1/1061874fa483485aeaf2f25cc35faf7651fafc55fb5aedccbc5a3b38f2639146/info"
        '400':
          description: Error due to invalid input or token format
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                invalid_token_format:
                  value:
                    message: "잘못된 토큰 형식입니다."
                invalid_input:
                  value:
                    message: "입력값을 다시 확인해주세요."

  /v1/payment/product/approve/kakao/{order_id}:
    get:
      tags:
        - Kakao Payment
      summary: Approve Kakao Pay payment
      description: Finalizes the payment process for an order using Kakao Pay.
      parameters:
        - in: path
          name: order_id
          required: true
          schema:
            type: string
          description: The order ID to be approved.
        - in: query
          name: pg_token
          required: true
          schema:
            type: string
          description: The pg_token obtained from Kakao Pay.
      responses:
        '200':
          description: Payment approved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "결제가 완료되었습니다."
        '400':
          description: Error due to invalid order or payment failure
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                non_existent_order:
                  value:
                    message: "존재하지 않는 주문입니다"
                payment_failure:
                  value:
                    message: "카카오페이 결제에 실패하였습니다."

  /v1/payment/product/cancel/kakao/{order_token}:
    post:
      tags:
        - Kakao Payment
      summary: Cancel Kakao Pay payment
      description: Cancels a payment process for an order using Kakao Pay.
      parameters:
        - in: path
          name: order_token
          required: true
          schema:
            type: string
          description: The order token of the payment to be canceled.
      responses:
        '200':
          description: Payment canceled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "결제가 취소되었습니다."
        '400':
          description: Error due to invalid input or other issues
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                invalid_input:
                  value:
                    message: "입력값을 다시 확인해주세요."
                non_existent_order:
                  value:
                    message: "존재하지 않는 주문입니다."
                already_cancelled:
                  value:
                    message: "이미 취소된 주문입니다."
                invalid_order_state:
                  value:
                    message: "주문의 상태가 유효하지 않습니다."
                kakao_pay_cancellation_failure:
                  value:
                    message: "카카오페이 결제 취소에 실패하였습니다."

  /v1/common/health_check:
    get:
      tags:
        - Common
      summary: Health Check API
      description: To check health check
      responses:
        '200':
          description: Health Check successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "OK"

  /v1/payment/product/fail/kakao/{order_token}:
    post:
      tags:
        - Kakao Payment
      summary: Simulate Kakao Pay payment failure
      description: Marks a payment process as failed for an order using Kakao Pay.
      parameters:
        - in: path
          name: order_token
          required: true
          schema:
            type: string
          description: The order token of the payment to mark as failed.
      responses:
        '200':
          description: Payment marked as failed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "결제가 실패되었습니다."
        '400':
          description: Error due to invalid input or non-existent order
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                invalid_input:
                  value:
                    message: "입력값을 다시 확인해주세요."
                non_existent_order:
                  value:
                    message: "존재하지 않는 주문입니다."

  /v1/promotion/banners:
    get:
      tags:
        - Promotion
      summary: Get promotion banners
      operationId: getPromotionBanners
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: Page number of the banner list.
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: Number of banners per page.
        - name: target_layer
          in: query
          required: true
          schema:
            type: string
            enum:
              - HOME_TOP
          description: The target layer of the banners to retrieve.
      responses:
        '200':
          description: A list of promotion banners.
          content:
            application/json:
              schema:
                type: object
                properties:
                  banners:
                    type: array
                    items:
                      type: object
                      properties:
                        banner_id:
                          type: integer
                          nullable: false
                        title:
                          type: string
                          nullable: true
                        title_font_color:
                          type: string
                          nullable: true
                        description:
                          type: string
                          nullable: true
                        description_font_color:
                          type: string
                          nullable: true
                        background_color:
                          type: string
                          nullable: true
                        big_image:
                          type: string
                          nullable: true
                        middle_image:
                          type: string
                          nullable: true
                        small_image:
                          type: string
                          nullable: true
                        action_page:
                          type: string
                          nullable: true
                        target_pk:
                          type: string
                          nullable: true
                        target_type:
                          type: string
                          nullable: true
                        external_target_url:
                          type: string
                          nullable: true
                        tags:
                          type: array
                          items:
                            type: string
              examples:
                example-1:
                  value: {
                    "banners": [
                      {
                        "banner_id": 1,
                        "title": "Example Banner Title",
                        "title_font_color": "#FFFFFF",
                        "description": "Example Description",
                        "description_font_color": "#EEEEEE",
                        "background_color": "#000000",
                        "big_image": "https://example.com/big_image.jpg",
                        "middle_image": "https://example.com/middle_image.jpg",
                        "small_image": "https://example.com/small_image.jpg",
                        "action_page": "https://example.com/action_page",
                        "target_pk": "123",
                        "target_type": "Product",
                        "external_target_url": "https://example.com/external_url",
                        "tags": ["test_tag"]
                      }
                    ]
                  }
        '400':
          description: Bad request, missing or invalid parameters.
          content:
            application/json:
              examples:
                missing_target_layer:
                  value: {"message": "입력값을 다시 확인해주세요."}
                invalid_target_layer:
                  value: {"message": "잘못된 target_layer 입니다."}

  /v1/project/home:
    get:
      tags:
        - Project
      summary: Get List of Projects
      operationId: getProjects
      parameters:
        - name: next_cursor
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/ProjectNextCursor'
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 20
          description: Number of banners per page.
        - name: title
          in: query
          required: false
          schema:
            type: string
          description: Search title of siple
          example: '사이플'
        - name: jobs
          in: query
          required: false
          schema:
            type: string
          description: 직무별
          example: 'FE,BE'
        - name: experience
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/ProjectExperienceType'
          description: 경력 여부
          example: 'ONLY_EXPERIENCE'
        - name: engagement_level
          in: query
          required: false
          schema:
            type: string
            enum: ['MEDIUM', 'HIGH']
            example: 'HIGH,MEDIUM'
          description: 요구 몰입도
        - name: duration
          in: query
          required: false
          schema:
            type: string
          description: 기간
          example: '1_2,3_4,5_6'
      responses:
        '200':
          description: A list of Projects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MainProjectPaginatedItemsResponse'

  /v1/project:
    post:
      tags:
        - Project
      summary: Create Project
      description: Create Project
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: '프로젝트 제목'
                  example: '마인크래프트 같이 할 사람 구합니다~!'
                descritpion:
                  type: string
                  description: '프로젝트 내용'
                  example: '야생 마인크래프트 같이 할 사람 구합니다~!'
                engagement_level:
                  $ref: '#/components/schemas/ProjectEngagementLevelType'
                duration:
                  $ref: '#/components/schemas/ProjectDuration'
                image:
                  type: string
                  description: '프로젝트 배경 이미지'
                  example: 'https://이미지.com'
                  nullable: true
                jobs:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: 'job 고유 id'
                        example: 1
                      total_limit:
                        type: integer
                        description: '역할을 구하려는 개수 1~10개'
                        example: 10
                experience:
                  $ref: '#/components/schemas/ProjectExperienceType'
                extra_information:
                  type: string
                  description: '번호 혹은 오카방 링크'
                  example: '010-XXXX-XXXX 혹은 오카방 입니다~'
                  nullable: true
              required:
                - title
                - descritpion
                - engagement_level
                - duration
                - image
                - jobs
                - experience
                - extra_information
      responses:
        '200':
          description: Created Project
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: '생성된 사이드 프로젝트 id'
                    example: 1
        '400':
          description: Bad Request for information
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - error_code
                properties:
                  message:
                    type: string
                    description: '어떠한 이유로 실패했는지'
                    example: '유효하지 않은 정보를 입력하여 생성에 실패했습니다.'
                  error_code:
                    $ref: '#/components/schemas/ProjectCreationErrorCode'
                  errors:
                    type: object
                    description: '에러 key value 에 맞춰서 대응'
                    properties:
                      title:
                        type: array
                        items:
                          $ref: '#/components/schemas/ProjectTitleCreationError'
                      description:
                        type: array
                        items:
                          $ref: '#/components/schemas/ProjectDescriptionCreationError'
                      engagement_level:
                        type: array
                        items:
                          $ref: '#/components/schemas/ProjectEngagementLevelCreationError'
                      duration:
                        type: array
                        items:
                          $ref: '#/components/schemas/ProjectDurationCreationError'
                      jobs:
                        type: array
                        items:
                          $ref: '#/components/schemas/ProjectJobsCreationError'
                      experience:
                        type: array
                        items:
                          $ref: '#/components/schemas/ProjectExperienceCreationError'
                      extra_information:
                        type: array
                        items:
                          $ref: '#/components/schemas/ProjectExtraInformationCreationError'
        '403':
          description: No Auth
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotUserAuthPermission'

  /v1/project/{id}:
    get:
      tags:
        - Project
      summary: Get Project
      description: Get Project
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: detail page for Project
      responses:
        '200':
          description: Detail Page can see
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectDetail'

  /v1/project/{id}/job/{job_id}/resume:
    post:
      tags:
        - Project
      summary: Resume Project Job
      description: Resume Project Job
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: detail page for Project
        - in: path
          name: job_id
          required: true
          schema:
            type: integer
          description: detail page for Project
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  description: '지원서 내용'
                  example: |
                    '저는 15년전 DS시절부터 닌텐도를 즐겨했으며 특히 동물의숲을 좋아했습니다. 현재도 모동숲을 즐기는 유저로서 사용자의 관점에서 개발할 수 있다는 장점이 있습니다. 잘 부탁드립니다.'
      responses:
        '200':
          description: Resume success
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                properties:
                  message:
                    type: string
                    description: '지원 성공 내용'
                    example: '지원에 성공했습니다.'
        '400':
          description: Resume fail
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - error_code
                properties:
                  message:
                    type: string
                    description: '지원 실패 내용'
                    example: '지원에 실패했습니다.'
                  error_code:
                    $ref: '#/components/schemas/ProjectResumeRequestErrorCode'
        '403':
          description: No Auth
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotUserAuthPermission'

components:
  schemas:
    ProjectResumeRequestErrorCode:
      type: string
      enum:
        - '400-project_resume-00001'  # 현재 나의 진행중인 프로젝트가 많음
        - '400-project_resume-00002'  # 이미 전부 지원이 종료됨

    ProjectCreationErrorCode:
      type: string
      enum:
        - '400-project_creation-00001'  # Input 값 오류 생성 오류

    NotUserAuthPermission:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: '오류 메시지'
          example: '로그인 후 이용해주세요.'

    ProjectTitleCreationError:
      type: string
      description: 'title 이 어떠한 이유로 실패했는지'
      example: '100 글자를 넘었습니다.'

    ProjectDescriptionCreationError:
      type: string
      description: 'description 이 어떠한 이유로 실패했는지'
      example: '유효하지 않은 무언가가 들어갔습니다.'

    ProjectEngagementLevelCreationError:
      type: string
      description: 'engagement_level 이 어떠한 이유로 실패했는지'
      example: '유효하지 않은 무언가가 들어갔습니다.'

    ProjectDurationCreationError:
      type: string
      description: 'duration 이 어떠한 이유로 실패했는지'
      example: '유효하지 않은 무언가가 들어갔습니다.'

    ProjectJobsCreationError:
      type: string
      description: 'jobs 가 어떠한 이유로 실패했는지'
      example: '직종은 1~10 명 까지 입력 가능합니다.'

    ProjectExperienceCreationError:
      type: string
      description: 'experience 가 어떠한 이유로 실패했는지'
      example: '유효하지 않은 무언가가 들어갔습니다.'

    ProjectExtraInformationCreationError:
      type: string
      description: 'extra_information 이 어떠한 이유로 실패했는지'
      example: '유효하지 않은 무언가가 들어갔습니다.'

    ProjectDuration:
      type: string
      enum: ['1_2', '3_4', '5_6']
      example: '1_2'

    ProjectEngagementLevelType:
      type: string
      enum: ['MEDIUM', 'HIGH']
      example: 'HIGH'

    ProjectNextCursor:
      type: string
      description: |
        다음 데이터를 가져오기 위한 token (정렬은 rearrangement_time, id 최신순으로 합니다)<br>
        next_cursor 의 값은 rearrangement_time, id 의 값을 json 후 base64 url-safe 인코딩 합니다.
      example: 'eyJvcmRlcmluZ190aW1lIjogIjIwMjQtMDEtMTQiLCAiaWQiOiAzfQ=='

    ProjectCurrentRecruitStatus:
      type: string
      enum: ['RECRUITING', 'ADDITIONAL_RECRUITING']
      description: 프로젝트 상태가 모집중, 진행중(추가 모집)
      example: 'RECRUITING'

    ProjectExperienceType:
      type: string
      enum: ['ALL', 'ONLY_EXPERIENCE']
      example: 'ONLY_EXPERIENCE'

    ProjectDetailExperienceDisplayName:
      type: string
      enum: ['경력자 only']
      example: '경력자 only'

    MainProjectListItem:
      type: object
      properties:
        id:
          type: integer
          description: '아이템의 고유 ID'
          example: 1
        title:
          type: string
          description: '프로젝트 title'
          example: '오버워치 전적 공유 사이트 만듭시다!'
        simple_description:
          type: string
          description: '프로젝트 description (100글자 정도 컷?)'
          example: '오버워치 전적 공유 사이트 만듭시다! 어이어이 ~'
        jobs:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                description: '직종 고유 ID'
                example: 1
              display_name:
                type: string
                description: '사용자에게 보여주는 정보'
                example: '프론트엔드'
              is_avaliable:
                type: boolean
                description: '직무의 마감 여부 / 직무 마감시 비활성화 표시'
                example: True
        experience:
          $ref: '#/components/schemas/ProjectExperienceType'
        current_recruit_status:
          $ref: '#/components/schemas/ProjectCurrentRecruitStatus'
        image:
          type: string
          description: '이미지 사진'
          example: 'https://이미지.이미지'
        is_bookmarked:
          type: boolean
          description: '북마크 설정 여부'
          example: false

    MainProjectPaginatedItemsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/MainProjectListItem'
        next_cursor:
          $ref: '#/components/schemas/ProjectNextCursor'
        has_more:
          type: boolean
          description: '더 많은 데이터가 있는지 여부'
          example: true

    ProjectDetail:
      type: object
      required:
        - id
        - title
        - description
        - duration_display_name
        - extra_information
        - jobs
        - experience_display_name
        - status_display_name
        - image
        - leader_info
        - created_at
      properties:
        id:
          type: integer
          description: '아이템의 고유 ID'
          example: 1
        title:
          type: string
          description: '프로젝트 title'
          example: '오버워치 전적 공유 사이트 만듭시다!'
        description:
          type: string
          description: '프로젝트 description (100글자 정도 컷?)'
          example: '오버워치 전적 공유 사이트 만듭시다! 어이어이 ~'
        duration_display_name:
          type: string
          description: '프로젝트 기간'
          example: '1~2개월'
        extra_information:
          type: string
          description: '오카방 정보 및 핸드폰 정보'
          example: '010-3123-1234'
        jobs:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                description: '직종 고유 ID'
                example: 1
              display_name:
                type: string
                description: '사용자에게 보여주는 정보'
                example: '프론트엔드'
              is_avaliable:
                type: boolean
                description: |
                  '직무의 마감 여부 / 직무 마감시 비활성화 표시 (혹은 경력 입력 안된 사람 지원 불가)'
                example: True
        experience_display_name:
          $ref: '#/components/schemas/ProjectDetailExperienceDisplayName'
        status_display_name:
          $ref: '#/components/schemas/ProjectDetailStatusDisplayName'
        image:
          type: string
          description: '이미지 사진'
          nullable: true
          example: 'https://이미지.이미지'
        leader_info:
          type: object
          required:
            - profile_image
            - nickname
            - simple_description
            - member_main_attribute
            - member_job_experience
            - project_info
          properties:
            profile_image:
              type: string
              description: '프로필 사진'
              nullable: true
              example: 'https://프로필_이미지.com'
            nickname:
              type: string
              description: '닉네임'
              example: 'SIPLE_DEV'
            simple_description:
              type: string
              description: '한줄 소개'
              nullable: true
              example: '사이플 관리자 입니다.'
            member_main_attribute:
              type: array
              items:
                type: object
                required:
                  - id
                  - display_name
                properties:
                  id:
                    type: integer
                    description: '성격 id'
                    example: 1
                  name:
                    type: string
                    description: '고유 name'
                    example: 'kind'
                  display_name:
                    type: string
                    description: '사용자에게 보여주는 성격 정보'
                    example: '친절해요'
            member_job_experience:
              type: array
              items:
                type: object
                required:
                  - id
                  - display_name
                  - year
                properties:
                  id:
                    type: integer
                    description: 'Job id'
                    example: 1
                  display_name:
                    type: string
                    description: '사용자에게 보여주는 직업 정보'
                    example: '백엔드'
                  year:
                    type: integer
                    description: '연차'
                    example: 2
            project_info:
              type: object
              required:
                - success
                - working
                - leaved
              properties:
                success:
                  type: integer
                  description: '성공한 프로젝트 개수'
                  example: 3
                working:
                  type: integer
                  description: '진행중인 프로젝트 개수'
                  example: 1
                leaved:
                  type: integer
                  description: '탈주한 프로젝트 개수'
                  example: 1
        created_at:
          type: string
          description: '생성 시간'
          example: '2024-04-01T00:00:00'

    ProjectDetailStatusDisplayName:
      type: string
      enum: ['모집중', '진행중', '완료', '실패', '삭제']
      example: '진행중'

    UsernameSignUpErrors:
      type: string
      enum:
        - "이미 사용중인 아이디입니다."
        - "아이디는 {}자 이상 {}자 이하로 입력해주세요."
        - "아이디는 영문, 숫자만 입력 가능합니다."

    NicknameSignUpErrors:
      type: string
      enum:
        - '이미 사용중인 닉네임입니다.'
        - '닉네임은 {}자 이상 {}자 이하로 입력해주세요.'
        - '닉네임은 한글, 영문, 숫자만 입력 가능합니다.'
        - '{} 는 사용할 수 없는 닉네임입니다.'

    EmailSignUpErrors:
      type: string
      enum:
        - '이미 가입한 이메일입니다.'
        - '이메일 형식이 올바르지 않습니다.'

    PasswordSignUpErrors:
      type: string
      enum:
        - '비밀번호와 비밀번호 확인이 동일하지 않습니다.'
        - '비밀번호는 {}자 이상 {}자 이하로 입력해주세요.'
